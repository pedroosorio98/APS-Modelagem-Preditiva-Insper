#Seja Yi uma variável que é 1 se a pessoa usou a droga e 0 se não, ai Yi~Ber(theta)
pessoas$Yi = ifelse(pessoas$Utilizou == "S",1,0)
numerodepessoasdapopulacao = length(pessoas$Nome)
numerodepessoasdapopulacao
idademinima = min(pessoas$Idade)
pessoasescolhidasaoacaso = replicate(5,pessoas$Nome[pessoas$Idade == 25][runif(1,1,length(pessoas$Nome[pessoas$Idade == 25]))])
qo = 0.35
#Seja Si o resultado do spinner para a pessoa i.
pessoas$Si = NaN  #primeiro botamos que todas não foram entrevistadas
#NA significa que a pessoa não foi entrevistada
pessoas$Si[sample(numerodepessoasdapopulacao,3500)]=rbinom(3500,1,qo)  #aqui entrevistamos 3500 distintas e aleatórias dentre todas da população
#Seja Ri o resultado da pessoa i, 1 igual já utilizei 0 = não utilizei
pessoas$Ri = ifelse(pessoas$Si == 1 & pessoas$Yi == 1,1,ifelse(pessoas$Si == 0 & pessoas$Yi == 0,1,ifelse(pessoas$Si == "na","na",0)))  #Aqui botamos o que a pessoa repondeu baseado em Yi (se ela já usou ou não) e no Si (O resultado do Spinner)
#Calculamos o estimador de MV:
thetamv = ((sum(pessoas$Ri,na.rm=TRUE)/3500)+qo-1)/(2*qo-1)
phiamostral = sum(pessoas$Ri,na.rm=TRUE)/3500
desvpadotimistathetamv = (sqrt(phiamostral*(1-phiamostral)))/(3500*(2*qo-1)^2)
ICotimista = c(thetamv - 2*desvpadotimistathetamv/sqrt(3500),thetamv + 2*desvpadotimistathetamv/sqrt(3500))
ICotimista
resultados1 = data.frame("qo:"=qo,"ICinf:"=ICotimista[1],"ICsup:"=ICotimista[2],"Thetamv:"=thetamv,"Phiamostral:"=phiamostral)
View(pessoas)
View(resultados1)
pessoas <- read_excel("pessoas.xlsx")
#Seja Yi uma variável que é 1 se a pessoa usou a droga e 0 se não, ai Yi~Ber(theta)
pessoas$Yi = ifelse(pessoas$Utilizou == "S",1,0)
numerodepessoasdapopulacao = length(pessoas$Nome)
numerodepessoasdapopulacao
idademinima = min(pessoas$Idade)
pessoasescolhidasaoacaso = replicate(5,pessoas$Nome[pessoas$Idade == 25][runif(1,1,length(pessoas$Nome[pessoas$Idade == 25]))])
qo = 0.35
#Seja Si o resultado do spinner para a pessoa i.
pessoas$Si = NaN  #primeiro botamos que todas não foram entrevistadas
#NA significa que a pessoa não foi entrevistada
pessoas$Si[sample(numerodepessoasdapopulacao,3500)]=rbinom(3500,1,qo)  #aqui entrevistamos 3500 distintas e aleatórias dentre todas da população
#Seja Ri o resultado da pessoa i, 1 igual já utilizei 0 = não utilizei
pessoas$Ri = ifelse(pessoas$Si == 1 & pessoas$Yi == 1,1,ifelse(pessoas$Si == 0 & pessoas$Yi == 0,1,ifelse(pessoas$Si == "na","na",0)))  #Aqui botamos o que a pessoa repondeu baseado em Yi (se ela já usou ou não) e no Si (O resultado do Spinner)
#Calculamos o estimador de MV:
thetamv = ((sum(pessoas$Ri,na.rm=TRUE)/3500)+qo-1)/(2*qo-1)
phiamostral = sum(pessoas$Ri,na.rm=TRUE)/3500
desvpadotimistathetamv = (sqrt(phiamostral*(1-phiamostral)))/(3500*(2*qo-1)^2)
ICotimista = c(thetamv - 2*desvpadotimistathetamv/sqrt(3500),thetamv + 2*desvpadotimistathetamv/sqrt(3500))
ICotimista
resultados1 = data.frame("qo:"=qo,"ICinf:"=ICotimista[1],"ICsup:"=ICotimista[2],"Thetamv:"=thetamv,"Phiamostral:"=phiamostral)
View(resultados1)
pessoas <- read_excel("pessoas.xlsx")
#Seja Yi uma variável que é 1 se a pessoa usou a droga e 0 se não, ai Yi~Ber(theta)
pessoas$Yi = ifelse(pessoas$Utilizou == "S",1,0)
numerodepessoasdapopulacao = length(pessoas$Nome)
numerodepessoasdapopulacao
idademinima = min(pessoas$Idade)
pessoasescolhidasaoacaso = replicate(5,pessoas$Nome[pessoas$Idade == 25][runif(1,1,length(pessoas$Nome[pessoas$Idade == 25]))])
qo = 0.35
#Seja Si o resultado do spinner para a pessoa i.
pessoas$Si = NaN  #primeiro botamos que todas não foram entrevistadas
#NA significa que a pessoa não foi entrevistada
pessoas$Si[sample(numerodepessoasdapopulacao,3500)]=rbinom(3500,1,qo)  #aqui entrevistamos 3500 distintas e aleatórias dentre todas da população
#Seja Ri o resultado da pessoa i, 1 igual já utilizei 0 = não utilizei
pessoas$Ri = ifelse(pessoas$Si == 1 & pessoas$Yi == 1,1,ifelse(pessoas$Si == 0 & pessoas$Yi == 0,1,ifelse(pessoas$Si == "na","na",0)))  #Aqui botamos o que a pessoa repondeu baseado em Yi (se ela já usou ou não) e no Si (O resultado do Spinner)
#Calculamos o estimador de MV:
thetamv = ((sum(pessoas$Ri,na.rm=TRUE)/3500)+qo-1)/(2*qo-1)
phiamostral = sum(pessoas$Ri,na.rm=TRUE)/3500
desvpadotimistathetamv = (sqrt(phiamostral*(1-phiamostral)))/(3500*(2*qo-1)^2)
ICotimista = c(thetamv - 2*desvpadotimistathetamv/sqrt(3500),thetamv + 2*desvpadotimistathetamv/sqrt(3500))
ICotimista
resultados1 = data.frame("qo:"=qo,"ICinf:"=ICotimista[1],"ICsup:"=ICotimista[2],"Thetamv:"=thetamv,"Phiamostral:"=phiamostral)
qos = c(0.15,0.05)
thetamvs = c()
phiamostrais = c()
ICinf = c()
ICsup = c()
for (i in 1:2){
qo = qos[i]
pessoas$Si = NaN
pessoas$Si[sample(numerodepessoasdapopulacao,3500)]=rbinom(3500,1,qo)
pessoas$Ri = ifelse(pessoas$Si == 1 & pessoas$Yi == 1,1,ifelse(pessoas$Si == 0 & pessoas$Yi == 0,1,ifelse(pessoas$Si == "na","na",0)))
thetamv = ((sum(pessoas$Ri,na.rm=TRUE)/3500)+qo-1)/(2*qo-1)
thetamvs[i]=thetamv
phiamostral = sum(pessoas$Ri,na.rm=TRUE)/3500
phiamostrais[i]= phiamostral
desvpadotimistathetamv = (sqrt(phiamostral*(1-phiamostral)))/(3500*(2*qo-1)^2)
ICotimista = c(thetamv - 2*desvpadotimistathetamv/sqrt(3500),thetamv + 2*desvpadotimistathetamv/sqrt(3500))
ICotimista
ICinf[i] = ICotimista[1]
ICsup[i]=ICotimista[2]
}
resultados2 = data.frame("qo:"=qos,"IC inf:" = ICinf,"ICsup:"=ICsup,"Thetamv:"=thetamvs,"Phiamostral:" = phiamostrais)
resultadoconjunto = resultados2
resultadoconjunto[3,]=resultados1[1,]
View(resultadoconjunto)
pessoas <- read_excel("pessoas.xlsx")
#Seja Yi uma variável que é 1 se a pessoa usou a droga e 0 se não, ai Yi~Ber(theta)
pessoas$Yi = ifelse(pessoas$Utilizou == "S",1,0)
numerodepessoasdapopulacao = length(pessoas$Nome)
numerodepessoasdapopulacao
idademinima = min(pessoas$Idade)
pessoasescolhidasaoacaso = replicate(5,pessoas$Nome[pessoas$Idade == 25][runif(1,1,length(pessoas$Nome[pessoas$Idade == 25]))])
qo = 0.35
n = 3500
#Seja Si o resultado do spinner para a pessoa i.
pessoas$Si = NaN  #primeiro botamos que todas não foram entrevistadas
#NA significa que a pessoa não foi entrevistada
pessoas$Si[sample(numerodepessoasdapopulacao,n)]=rbinom(n,1,qo)  #aqui entrevistamos 3500 distintas e aleatórias dentre todas da população
#Seja Ri o resultado da pessoa i, 1 igual já utilizei 0 = não utilizei
pessoas$Ri = ifelse(pessoas$Si == 1 & pessoas$Yi == 1,1,ifelse(pessoas$Si == 0 & pessoas$Yi == 0,1,ifelse(pessoas$Si == "na","na",0)))  #Aqui botamos o que a pessoa repondeu baseado em Yi (se ela já usou ou não) e no Si (O resultado do Spinner)
#Calculamos o estimador de MV:
thetamv = ((sum(pessoas$Ri,na.rm=TRUE)/n)+qo-1)/(2*qo-1)
phiamostral = sum(pessoas$Ri,na.rm=TRUE)/n
desvpadotimistathetamv = (sqrt(phiamostral*(1-phiamostral)))/(n*(2*qo-1)^2)
ICotimista = c(thetamv - 2*desvpadotimistathetamv,thetamv + 2*desvpadotimistathetamv)
ICotimista = c(thetamv - 2*desvpadotimistathetamv,thetamv + 2*desvpadotimistathetamv)
resultados1 = data.frame("qo:"=qo,"ICinf:"=ICotimista[1],"ICsup:"=ICotimista[2],"Thetamv:"=thetamv,"Phiamostral:"=phiamostral)
qos = c(0.15,0.05)
thetamvs = c()
phiamostrais = c()
ICinf = c()
ICsup = c()
for (i in 1:2){
qo = qos[i]
pessoas$Si = NaN
pessoas$Si[sample(numerodepessoasdapopulacao,n)]=rbinom(n,1,qo)
pessoas$Ri = ifelse(pessoas$Si == 1 & pessoas$Yi == 1,1,ifelse(pessoas$Si == 0 & pessoas$Yi == 0,1,ifelse(pessoas$Si == "na","na",0)))
thetamv = ((sum(pessoas$Ri,na.rm=TRUE)/n)+qo-1)/(2*qo-1)
thetamvs[i]=thetamv
phiamostral = sum(pessoas$Ri,na.rm=TRUE)/n
phiamostrais[i]= phiamostral
desvpadotimistathetamv = (sqrt(phiamostral*(1-phiamostral)))/(n*(2*qo-1)^2)
ICotimista = c(thetamv - 2*desvpadotimistathetamv,thetamv + 2*desvpadotimistathetamv)
ICinf[i] = ICotimista[1]
ICsup[i]=ICotimista[2]
}
resultados2 = data.frame("qo:"=qos,"IC inf:" = ICinf,"ICsup:"=ICsup,"Thetamv:"=thetamvs,"Phiamostral:" = phiamostrais)
resultadoconjunto = resultados2
resultadoconjunto[3,]=resultados1[1,]
View(resultadoconjunto)
sum(pessoas$Ri,na.rm=TRUE)
sum(pessoas$Si,na.rm=TRUE)
sum(pessoas$Si,na.rm=TRUE)
pessoas <- read_excel("pessoas.xlsx")
#Seja Yi uma variável que é 1 se a pessoa usou a droga e 0 se não, ai Yi~Ber(theta)
pessoas$Yi = ifelse(pessoas$Utilizou == "S",1,0)
numerodepessoasdapopulacao = length(pessoas$Nome)
numerodepessoasdapopulacao
idademinima = min(pessoas$Idade)
pessoasescolhidasaoacaso = replicate(5,pessoas$Nome[pessoas$Idade == 25][runif(1,1,length(pessoas$Nome[pessoas$Idade == 25]))])
qo = 0.35
n = 3500
#Seja Si o resultado do spinner para a pessoa i.
pessoas$Si = NaN  #primeiro botamos que todas não foram entrevistadas
#NA significa que a pessoa não foi entrevistada
pessoas$Si[sample(numerodepessoasdapopulacao,n)]=rbinom(n,1,qo)  #aqui entrevistamos 3500 distintas e aleatórias dentre todas da população
#Seja Ri o resultado da pessoa i, 1 igual já utilizei 0 = não utilizei
pessoas$Ri = ifelse(pessoas$Si == 1 & pessoas$Yi == 1,1,ifelse(pessoas$Si == 0 & pessoas$Yi == 0,1,ifelse(pessoas$Si == "na","na",0)))  #Aqui botamos o que a pessoa repondeu baseado em Yi (se ela já usou ou não) e no Si (O resultado do Spinner)
#Calculamos o estimador de MV:
thetamv = ((sum(pessoas$Ri,na.rm=TRUE)/n)+qo-1)/(2*qo-1)
phiamostral = sum(pessoas$Ri,na.rm=TRUE)/n
desvpadotimistathetamv = (sqrt(phiamostral*(1-phiamostral)))/(n*(2*qo-1)^2)
ICotimista = c(thetamv - 2*desvpadotimistathetamv,thetamv + 2*desvpadotimistathetamv)
resultados1 = data.frame("qo:"=qo,"ICinf:"=ICotimista[1],"ICsup:"=ICotimista[2],"Thetamv:"=thetamv,"Phiamostral:"=phiamostral)
sum(pessoas$Si,na.rm=TRUE)
source('~/TentativaAPS2EstatII.r')
source('~/TentativaAPS2EstatII.r')
qchisq(0.1)
qchisq(0.1,23)
qchisq(0.9,23)
pchisq(17.25,23)*2
=2*(1-pchisq(30.67,23))
=2*(1-pchisq(30.67,23))
2*(1-pchisq(30.67,23))
qnorm(0.01)
qt(0.025,190)
2*(1-pt(2.469,190))
qt(0.05,14)
2*pt(-3.87298,14)
bases = read_excel('pessoas.xlsx')
bases = read_excel('~/pessoas.xlsx')
bases = read_excel("~/pessoas.xlsx")
qt(0.025,7)
qt(0.975,7)
qchisq(0.05,7)
qchisq(0.95,29)
qnorm(0.95)
qt(0.025,29)
qt(0.975,29)
qchisq(0.025,29)
qchisq(0.975,29)
qt(0.95,29)
library(quantmod)
qnorm(0.1,34)
qnorm(0.1)
pnorm(-1.549)
(0.58-0.5)/(sqrt(0.5*0.5/150))
qnorm(0.95)
pnorm(1.9596)
=1-0.97497
1-0.97497
qnorm(0.9)
pnorm(-2.22914)
1-pnorm(-2.22914)
qnorm(0.99)
(0.73-0.68)/sqrt(0.68*0.32/1000)
1-pnorm(-2.606)
qt(0.95,228)
qt(0.05,228)
1-pt(0.060718,228)
qchisq(0.95,9)
1/qf(0.05,29,29)
(1/qf(0.05,29,29))*0.25
(1/qf(0.95,29,29))*0.25
0.0412/0.1734
qf(0.05,20,16)
qf(0.95,20,16)
(1/0.4578)*0.2376
(1/2.2756)*0.2376
2*pf(0.2376,20,16)
pf(0.2376,20,16)
qf(0.05,6,7)
qf(0.95,6,7)
(1/3.8659)*7.4547
(1/0.237718)*7.4547
qf(0.05,6,7)
qf(0.95,6,7)
qt(0.1,7)
qt(0.05,7)
qf(0.05,24,15)
qf(0.95,24,15)
qt(0.9,39-1)
qt(0.9,39)
2.9/3.7
pf(0.78378,11,11)
pf(0.78378,11,11)*2
qt(0.025,11,11)
qt(0.025,12+12-2)
pt(-0.95794,12+12-2)
pt(-0.95794,12+12-2)*2
pt(2.9/3.7,11,11)2
pt(2.9/3.7,11,11)*2
pf(2.9/3.7,11,11)*2
pf(0.78,11,11)*2
pt(-1.75292,12+12-2)*2
qt(0.9,6+6-2)
qf(0.9725,65,65)
qf(0.025,65,65)
qf(0.95,65,65)
1-pf(1.5459,65,65)
qf(0.05,65,65)
qt(0.05,66+66-2)
(1/qf(0.05,65,65))*1.5459
(1/qf(0.95,65,65))*1.5459
a <- c((1/qf(0.975,65,65))*1.5459,(1/qf(0.025,65,65))*1.5459)
a
read.csv('Price.csv')
View(dataframe)
View(data_frame)
data_frame = read.csv('Price.csv',sep = ';')
View(data_frame)
data_frame['T71']
data_frame=read.csv('Price.csv',header=TRUE,sep=';')
plot(data_frame['T71'][,1])
plot(data_frame['T71'][,1],type='l')
data_frame=read.csv('Ibovespa.csv',header=TRUE,sep=';')
plot(data_frame['Adj.Close'][,1],type='l')
plot(data_frame['Adj.Close'][,1],type='l',xlab='Days',ylab='Adj Close')
plot(data_frame['Adj.Close'][,1],type='l',xlab='Days',ylab='Adj Close',lwd=3)
rm(list=ls)
rm(list=ls())
savehistory()
install.packages(MASS)
install.packages('MASS')
install.packages('ISLR')
par(mfrow=c(1,2)) # Vai deixar um gráfico do lado do outro
plot(seq(1,100),seq(1,100),pch=19,xlab='X',ylab='Y')
plot(seq(1,100),log(seq(1,100)),pch=19,xlab='X',ylab='Y')
library(quantmod)
getSymbols("PETR4.SA;LREN3.SA;ABEV3.SA;SMLS3.SA;^BVSP",from="2014-01-01",to="2020-06-19"
install.packages('quantmod')
library(quantmod)
getSymbols("PETR4.SA;LREN3.SA;ABEV3.SA;SMLS3.SA;^BVSP",from="2014-01-01",to="2020-06-19"
getSymbols("PETR4.SA;LREN3.SA;ABEV3.SA;SMLS3.SA;^BVSP",from="2014-01-01",to="2020-06-19")
getSymbols("PETR4.SA;LREN3.SA;ABEV3.SA;SMLS3.SA;^BVSP",from="2014-01-01",to="2020-06-19")
install.packages('car')
install.packages("car")
install.packages("car")
# Importando as bibliotecas para pegar o dataframe Boston:
library(MASS)
library(ISLR)
# Queremos explicar medv por todas as outra variáveis no dataframe Boston:
multiple_linear_regression_boston= lm(medv~.,data=Boston)
summary(multiple_linear_regression_boston)
# Pegando o R2:
r_quadrado = summary(multiple_linear_regression_boston)$r.sq
r_quadrado
library(car)
vif(multiple_linear_regression_boston)
read.csv('Base IBOV e USDBRL.csv')
read_excel('Base IBOV e USDBRL.xlsx')
read_excel('C:\Users\pedro\Base IBOV e USDBRL.xlsx')
read_excel('C:/Users/pedro/Base IBOV e USDBRL.xlsx')
read.csv('C:/Users/pedro/Base IBOV e USDBRL.csv')
read_excel('C:/Users/pedro/Base IBOV e USDBRL.xlsx')
library(readxl)
read_excel('C:/Users/pedro/Base IBOV e USDBRL.xlsx')
df = read.csv('C:\Users\pedro\clientes')
df = read.csv('C:/Users/pedro/clientes')
df = read.csv('C:/Users/pedro/clientes.csv')
str(df)
View(df)
plot(X,col=ifelse(y=="S","red4","blue4"),pch=19,ccx=0.9)
# Vou pegar as primeiras duas colunas:
X = df[,1:2]
Y = df[,3]
plot(X,col=ifelse(y=="S","red4","blue4"),pch=19,ccx=0.9)
plot(X,col=ifelse(y=="S","red4","blue4"),pch=19,cex=0.9)
plot(X,col=ifelse(y=="S","red4","blue4"),pch=19,cex=0.9,
xlim=c(18,75),ylim=c(2,12),xlab="Idade",ylab="Renda",main="Utilizou")
plot(X,col=ifelse(y=="S","red4","blue4"),pch=19,ccx=0.9,
xlim=c(18,75),ylim=c(2,12),xlab="Idade",ylab="Renda",main="Utilizou")
plot(X,col=ifelse(y=="S","red4","blue4"),pch=19,cex=0.9,
xlim=c(18,75),ylim=c(2,12),xlab="Idade",ylab="Renda",main="Utilizou")
plot(X,col=ifelse(y=="S","red4","blue4"),pch=19,cex=0.9,
xlim=c(18,75),ylim=c(2,12),xlab="Idade",ylab="Renda",main="Utilizou")
plot(X,col=ifelse(Y=="S","red4","blue4"),pch=19,cex=0.9,
xlim=c(18,75),ylim=c(2,12),xlab="Idade",ylab="Renda",main="Utilizou")
install_packages(class)
install_packages('class')
install_package('class')
install_package(class)
library(class)
library(class)
plot_classifier = function(X,y,k) {
grid_X = expand.grid(seq(18,75,length=100),seq(2,12,length=100))
grid_y = knn(X,grid_X,y,k=k)
plot(grid_X,col=ifelse(grid_y=="S","coral","cornflowerblue"),
pch=19,cex=0.5,xlim=c(18,75),ylim=c(2,12),main=sprintf("k=%d",k))
points(X,col=ifelse(y=="S","red4","blue4"),pch=19,cex=0.9)
}
par(mfrow=c(1,2))
plot_classifier(X,y,k=1)
plot_classifier(X,y,k=15)
plot_classifier(X,Y,k=1)
plot_classifier(X,Y,k=15)
set_seed(1234)
idx = sample(1:nrow(X),size=round(0.5*nrow(X)),replace=FALSE)
set.seed(1234)
idx = sample(1:nrow(X),size=round(0.5*nrow(X)),replace=FALSE)
View(idx)
x_trn = X[idx,]
y_trn=y[idx]
X_tst = X[-idx,]
y_tst = y[-idx]
k_max = 100
test_error = numeric(k_max)
x_trn = X[idx,]
y_trn=y=Y[idx]
X_tst = X[-idx,]
y_tst = y[-idx]
k_max = 100
test_error = numeric(k_max)
for (k in 1:k_max){y_hat=knn(X_trn,X_tst,y_trn,k=k)
test_error[k]=mean(y_hat!=y_tst)
cat(sprintf("K = %i: test error = %.5f\n",k,test_error[k]))}
X_trn = X[idx,]
y_trn=y=Y[idx]
X_tst = X[-idx,]
y_tst = y[-idx]
k_max = 100
test_error = numeric(k_max)
for (k in 1:k_max){y_hat=knn(X_trn,X_tst,y_trn,k=k)
test_error[k]=mean(y_hat!=y_tst)
cat(sprintf("K = %i: test error = %.5f\n",k,test_error[k]))}
---
title: ''
author: "Pedro Osorio Magaldi Netto"
date: "28/08/2020"
output: pdf_document
---
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
install.packages(ISLR)
install.packages('ISLR')
install.packagrs('pROC')
install.packages('pROC')
install.packages('tree')
install.packages('pROC')
base = read.csv('C:/Users/pedro/spam.csv')
library('tree')
library('pROC')
str(base)
View(base)
install.packages("dplyr")
library("dplyr")
library(dplyr)
install.packages("rlang")
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("installr")
updateR()
updateR()
updater()
updateR()
install.packages("dplyr")
library(dplyr)
remotes::update_packages("rlang")
update_packages("rlang")
update.packages("rlang")
library(dplyr)
update.packages("rlang")
install.packages("rlang")
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("rlang")
install.packages("rlang")
install.packages("dplyr")
library("dplyr")
hotels <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv')
C(10:1000)
a = C(10:1000)
a = C(10:1000)
a = C(1,2,3,5,6)
c(1,2,3,5)
a = C(1,2,3,5,6)
a = C(1,2,3,5,6)
a <- C(1,2,3,5,6)
a <- C(1,2,3,5,6)
a <- c(1:10000)
a
ifels(a>10,"b","c")
ifelse(a>10,"b","c")
data <- read.csv("Base Ações Brasil 2000-2020.csv", sep = ";")
View(data)
data <- read.csv("Base Ações Brasil 2000-2020.csv", sep = ";", skip=4)
data <- read.csv("Base Ações Brasil 2000-2020.csv", sep = ";", skip=3)
View(data)
sub("Fechamento.ajust.p..prov.Em.moeda.orig", "", df1[,1])
sub("Fechamento.ajust.p..prov.Em.moeda.orig", "", data)
colnames(data) <- sub("Fechamento.ajust.p..prov.Em.moeda.orig", "", data)
View(data)
install.packages(pdfetch)
install.packages("pdfetch")
install.packages(wooldridge)
install.packages("wooldridge")
data(smoke)
library(wooldridge)
data(smoke)
View(smoke)
data(ceosal1)
View(ceosal1)
library(wooldridge)
data(smoke)
View(smoke)
plot(smoke$educ,smoke$cigs)
plot(smoke$educ,smoke$lcigs)
plot(smoke$educ,smoke$cigs)
lm(cigs~educ,data = smoke)
summary(lm(cigs~educ,data = smoke))
summary(lm(income~educ,data = smoke))
summary(lm(cigs~income,data = smoke))
plot(smoke$educ,smoke$cigs, xlab = "Educ", ylab = "Cigs", main = "Smoke")
plot(smoke$income,smoke$cigs, xlab = "Educ", ylab = "Cigs", main = "Smoke")
plot(smoke$white,smoke$cigs, xlab = "Educ", ylab = "Cigs", main = "Smoke")
plot(smoke$cigpric,smoke$cigs, xlab = "Educ", ylab = "Cigs", main = "Smoke")
summary(lm(cigs~.,data = smoke))
summary(lm(cigs~educ,data = smoke))
summary(smoke)
smoke$cigs>0
mean(smoke$cigs>0)
plot(smoke$cigpric,smoke$income)
smoke$income
summary(smoke)
corr
cor
cor()
corr(smoke)
cor(smoke)
summary(smoke)
ggplot(smoke, aes(educ,cigs))+geom_point()
library(ggplot2)
ggplot(smoke, aes(educ,cigs))+geom_point()
library(wooldridge)
library(ggplot2)
data(smoke)
View(smoke)
ggplot(smoke, aes(educ,cigs))+geom_point()
ggplot(smoke, aes(educ,cigs))+geom_point() + labs(title="cigs x educ")
ggplot(smoke, aes(educ,cigs))+geom_point() + labs(title="       cigs x educ")
+theme(plot.title = element_text(hjust = 0.5))
ggplot(smoke, aes(educ,cigs))+geom_point() + labs(title="cigs x educ") + theme(plot.title = element_text(hjust = 0.5))
+ theme(plot.title = element_text(hjust = 0.5))
graph_educ_cigs <- ggplot(smoke, aes(educ,cigs))+geom_point() + labs(title="cigs x educ")
graph_educ_cigs + theme(plot.title = element_text(hjust = 0.5))
graph_educ_cigs <- ggplot(smoke, aes(educ,cigs))+geom_point() + labs(title="cigs x educ")
graph_educ_cigs + theme(plot.title = element_text(hjust = 0.5))
graph_educ_cigs <- ggplot(smoke, aes(educ,cigs))+geom_point() + labs(title="Cigarros consumidos por dia
(cigs) x Anod e educação(educ)")
graph_educ_cigs + theme(plot.title = element_text(hjust = 0.5))
graph_educ_cigs <- ggplot(smoke, aes(educ,cigs))+geom_point() + labs(y = "Cigarros consumidos por dia
(cigs)", x = "Anos e educação(educ)", title = "Cigarros consumidos por dia x Anos de Educação")
graph_educ_cigs + theme(plot.title = element_text(hjust = 0.5))
graph_educ_cigs <- ggplot(smoke, aes(educ,cigs))+geom_point() + labs(y = "Cigarros consumidos por dia
(cigs)", x = "Anos de educação(educ)", title = "Cigarros consumidos por dia x Anos de Educação")
graph_educ_cigs + theme(plot.title = element_text(hjust = 0.5))
pais(smoke)
pairs(smoke)
summary(lm(cigs~.,data=smoke))
summary(lm(cigs~educ+age+age*educ,data=smoke))
summary(lm(cigs~educ+age,data=smoke))
setwd("C:/Users/pedro/APS Modelagem Preditiva")
setwd("C:/Users/pedro/APS - Modelagem Preditiva")
source('C:/Users/pedro/APS - Modelagem Preditiva/APS Modelagem Preditiva - Código.R')
